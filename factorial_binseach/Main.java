import java.util.Arrays;

/**
 * Created by proton on 26.02.15.
 */
public class Main {

    public static void main (String[] args) {

        // произвожу вызов метода расчета факториала 4 при помощи рекурсии
        // сразу же распечатываю результат
        System.out.println("Факториал 4 = " + factorial(4));

        //создаю массив на 10 элементов
        int[] arr = new int[10];

        //наполняю значения массиа
        arr = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

        //вывожу имеющийся массив
        System.out.println("Данный массив : " + Arrays.toString(arr));

        //произвожу вызов метода бинарного поиска при помощи рекурсии
        //распечатываю результат
        System.out.println("Искомый элемент имеет позицию " + binarySearch(arr, 3, 0, arr.length-1));

    }

    //метод расчета факториала при помощи рекурсии
    public static long factorial(long f) {

        //задаю условие при корором метод будет вызывать сам себя, уменьшая значение переданного
        //в метод числа на 1 за каждый шаг рекурсии
        //если число меньше либо равно 1 то следует прекратить рекурсию
        if (f <= 1) {
            return 1;
        } else {
            return f * factorial(f - 1);
        }
    }

    //метод бинарного поиска при помощи рекурсии
    static int binarySearch(int[] arr, int key, int left, int right)
    {
        //сортирую имеющийся массив
        Arrays.sort(arr);

        //делю массив на пополам
        int mid = left + (right - left) / 2;

        //сверяю равен ли средний элемент искомомму числу, если да то вывожу его позицию
        if (arr[mid] == key)
            return mid;

        //если нет, то смотрю если средний элемент больше искомого числа то произвожу поиск в левой половине
        //вызываю рекурсивно метод в который передам только левую часть массива
        //или в любом другом случае произвожу поиск в правой части массива со сдвигом начала участка на +1
        //чтоб не попасть на левую сторону массива
        else if (arr[mid] > key)
            return binarySearch(arr, key, left, mid);
        else
            return binarySearch(arr, key, mid + 1, right);
    }

}

